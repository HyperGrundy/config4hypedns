#!/usr/bin/python
# You may redistribute this program and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



############################################################################
# Script to retreive valid HypeDNS TLDs and generate a configuration file. #
############################################################################

# Courtesy of your friendly neighborhood Grundy



import sys
import os
import argparse
import urllib2
import simplejson as json



def getICANN():
    try:
        if not args.quiet:
            print " -Getting ICANN TLDs from the internet..."
        icannlist = urllib2.urlopen('http://data.iana.org/TLD/tlds-alpha-by-domain.txt')
    except urllib2.URLError as e:
        sys.stderr.write("ERROR: Failed to retrieve ICANN TLDs: {0}\n".format(e.reason))
        raise
        return False
    except urllib2.HTTPError as e:
        sys.stderr.write("ERROR: Failed to retrieve ICANN TLDs with HTTP error: {0} - {1}\n".format(e.code, e.reason))
        raise
        return False
    icanntlds = set()
    icannlist.readline()
    for line in icannlist:
        icanntlds.add(line.strip().lower())
    return icanntlds



def getHypeDNS(exclusionSet):
    try:
        if not args.quiet:
            print " -Getting HypeDNS TLDs from Hyperboria..."
        hypejson = urllib2.urlopen('http://[fc5d:baa5:61fc:6ffd:9554:67f0:e290:7535]/nodes/list.json')
    except urllib2.URLError as e:
        sys.stderr.write("ERROR: Failed to retrieve HypeDNS TLDs: {0}\n".format(e.reason))
        raise
        return False
    except urllib2.HTTPError as e:
        sys.stderr.write("ERROR: Failed to retrieve HypeDNS TLDs with HTTP error: {0} - {1}\n".format(e.code, e.reason))
        raise
        return False
    try:
        hypehosts = json.loads(hypejson.read())
    except json.JSONDecodeError as e:
        sys.stderr.write("ERROR: Failed to decode HypeDNS JSON: {0}\n".format(e.msg))
        raise
        return False
    tldlist = []
    for host in hypehosts['nodes']:
        if len(host['name']) > 0:
            if host['ip'][-4:] != host['name'][-4:]:
                if ' ' not in host['name']:
                    tld = host['name'].split('.')[-1].lower()
                    if tld[0].isalnum():
                        tldlist.append(tld)
    tldset = set(tldlist)
    tldset -= exclusionSet
    tldlist = list(tldset)
    tldlist.sort()
    return tldlist



def writeConf(syntax, targetfile):
    if syntax == 'bind9':
        try:
            if not args.quiet:
                print " -Generating "+targetfile+" file for BIND 9..."
            with open(targetfile,'w') as configfile:
                configfile.write('# Fordwarding zones for HypeDNS TLDs\n\n')
                for tld in tldlist:
                    configfile.write('zone "'+tld+'" { type forward; forwarders { fc5d:baa5:61fc:6ffd:9554:67f0:e290:7535; }; };\n')
                configfile.write('\n')
                configfile.close()
                return True
        except IOError:
            sys.stderr.write("ERROR: Failed to open and/or write to file (Do you need to be root?)\n")
            raise
            return False
    elif syntax == 'dnsmasq':
        try:
            if not args.quiet:
                print " -Generating "+targetfile+" file for Dnsmasq..."
            with open(targetfile,'w') as configfile:
                configfile.write('# Special server option for HypeDNS TLDs\n\n')
                for tld in tldlist:
                    configfile.write('server=/'+tld+'/fc5d:baa5:61fc:6ffd:9554:67f0:e290:7535\n')
                configfile.write('\n')
                configfile.close()
                return True
        except IOError:
            sys.stderr.write("ERROR: Failed to open and/or write to file (Do you need to be root?)\n")
            raise
            return False



def includeConf(syntax, targetfile):
    if syntax == 'bind9':
        try:
            if not args.quiet:
                print " -Including "+targetfile+" file in BIND 9 configuration...",
            included = False
            with open('/etc/bind/named.conf','r') as includefile:    
                for line in open("file"):
                    if 'include "'+targetfile+'";' in line:
                        included = True
                        print " already included."                
                includefile.close()
            if not included:
                with open('/etc/bind/named.conf','a') as includefile:
                    includefile.write('\n# Include HypeDNS forwarding zones file\n')
                    includefile.write('include "'+targetfile+'";\n')
                    includefile.close()
                print ""
            return True
        except IOError:
            sys.stderr.write("ERROR: Failed to open and/or write to file (Do you need to be root?)\n")
            raise
            return False
    elif syntax == 'dnsmasq':
        try:
            if targetfile == '/etc/dnsmasq.conf.hypedns':
                if not args.quiet:
                    print " -Including "+targetfile+" file in dnsmasq configuration...",
                included = False
                with open('/etc/dnsmasq.conf','r') as includefile:    
                    for line in open("file"):
                        if 'conf-file=/etc/dnsmasq.conf.hypedns' in line:
                            included = True
                            print " already included."                
                    includefile.close()
                if not included:
                    with open('/etc/dnsmasq.conf','a') as includefile:
                        includefile.write('\n# Include HypeDNS conf file\n')
                        includefile.write('conf-file=/etc/dnsmasq.conf.hypedns\n')
                        includefile.close()
                    print ""
                return True
            else:
                return True
        except IOError:
            sys.stderr.write("ERROR: Failed to open and/or write to file (Do you need to be root?)\n")
            raise
            return False
        


def discoverSyntax():
    try:
        return True
    except:
        return False



def discoverTarget():
    try:
        if args.syntax not in [ 'bind9', 'dnsmasq' ]:
            discoverSyntax()
        if args.syntax == 'bind9':
            if os.path.exists(/etc/bind/named.conf):
                args.target = '/etc/bind/named.conf.hypedns'
                return True
            else:
                sys.stderr.write("ERROR: Failed to discover correct config file location\n")
                raise DiscoveryFail
                return False
        elif args.syntax == 'dnsmasq':    
            if os.path.isdir('/etc/NetworkManager/dnsmasq.d'):
                args.target = '/etc/NetworkManager/dnsmasq.d/hypedns'
                return True
            elif os.path.isdir('/etc/dnsmasq.d'):
                args.target = '/etc/dnsmasq.d/hypedns'
                return True
            elif os.path.exists(/etc/dnsmasq.conf):
                args.target = '/etc/dnsmasq.conf.hypedns'
                return True
            else:
                sys.stderr.write("ERROR: Failed to discover correct config file location\n")
                raise DiscoveryFail
                return False
    except:
        raise
        return False



def scheduleUpdates(syntax, target):
    try:
        return True
    except:
        return False



parser = argparse.ArgumentParser(description='Configures Dnsmasq or BIND 9 to identify and forward HypeDNS host names to the HypeDNS name server without affecting normal internet name resolution. Retrieves ICANN TLD list, retrieves HypeDNS TLD list, and uses lists to generate a safe configuration file.')
parser.add_argument("-q", "--quiet", action="store_true", help='Quits status messages (errors are still shown).')
parser.add_argument('--auto-install', action="store_true", help='Attempt to configure and setup auto-updates automatically.')
parser.add_argument('--syntax', choices=['dnsmasq','bind9'], help='Indicate configuration sytax to use. Required if not using auto-config or auto-update.')
parser.add_argument('--target', metavar='FILE', help='Target file for output.')
args = parser.parse_args()
try:
    if args.auto_install:
        discoverTarget() 
        tldlist = getHypeDNS(getICANN())
        writeConf(args.syntax, args.target)
        includeConf(args.syntax, args.target)               
        scheduleUpdates(args.syntax, args.target)
    else:
        if args.syntax:
            tldlist = getHypeDNS(getICANN())
            if args.target:
                writeConf(args.syntax, args.target)
            else:
                if args.syntax == 'bind9':
                    writeConf(args.syntax, 'named.conf.hypedns')
                elif args.syntax == 'dnsmasq':
                    writeConf(args.syntax, 'dnsmasq.conf.hypedns')
        else:
            parser.print_help()
except:
    sys.stderr.write("*** Operation failed ***\n")
    raise
    sys.exit(1)



